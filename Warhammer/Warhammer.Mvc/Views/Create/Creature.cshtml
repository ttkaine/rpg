@model Warhammer.Core.Models.CreateCreatureViewModel
@{
    ViewBag.Title = "Add a Creature to the Bestiary";
}
<div class="content-wrapper">

    <div class="main-content">
        <div class="content-block">

            <h2>Add a creature of a monster to the Bestiary</h2>
            <p>Just put in the basics here to create the monster's page. You can add more details and pictures and formatting etc once the log has been added.</p>

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()




                <div class="form-horizontal">
                    <h1>Add a BEAST!</h1>

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                    <div class="form-group">
                        @Html.Label("Is this creature a kind-of sdomething else we know about? Pick something appropriate here so we know:", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.DropDownListFor(m => m.ParentId, Model.ParentOptions, "-", new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.Label("Tell us the name of the beast:", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Tell us a bit abot it:", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.Label("How dangerous is it?", htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EnumDropDownListFor(model => model.ThreatLevel, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ThreatLevel, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create a Monster!" class="btn btn-default" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="side-bar">
        <div class="content-block">
            <p>Creatures and Monsters</p>
            <p>Have you seen a beast worth noting down? This is the place for such things...</p>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@using System.Text.RegularExpressions
@model Warhammer.Core.Entities.Comment
<li id="comment_@Model.Id" class="@(Model.IsPlayerComment ? "player-comment" : "character-comment")">
    @if (!Model.IsPlayerComment)
    {

        @Html.Action("PageImage", "Page", new { id = Model.PersonId })
        <h4>@Model.Person.FullName</h4>
    }
    else
    {
        <h4>@Model.Player.DisplayName</h4>
    }
    <div class="commentdetail">

        @if (ViewBag.EditMode && (User.IsInRole("Admin") || User.Identity.Name == Model.Player.UserName))
        {
            using (Ajax.BeginForm("EditComment", "Comment", new AjaxOptions { InsertionMode = InsertionMode.Replace, HttpMethod = "Post", UpdateTargetId = "comments" }))
            {
                <textarea name="comment" value="@Model.Id">@Html.Raw(Model.Description)</textarea>
                <input name="commentId" hidden="" value="@Model.Id" />
                if ((bool)ViewData["isPageView"])
                {
                    <input name="pageId" hidden="" value="@Model.PageId" />
                }
                <input id="postbutton" type="submit" value="Save Edits" class="btn btn-block btn-warning" />
                <hr/>
            }
            using (Ajax.BeginForm("Delete", "Comment", new AjaxOptions { InsertionMode = InsertionMode.Replace, HttpMethod = "Post", UpdateTargetId = "comments" }))
            {
                <input name="commentId" hidden="" value="@Model.Id"/>
                if ((bool)ViewData["isPageView"])
                {
                    <input name="pageId" hidden="" value="@Model.PageId"/>
                }
                <input id="postbutton" type="submit" value="Delete" class="btn btn-block btn-danger" />
                    <hr />

            }
        }
        else
        {
            
                string text = Model.Description;
                text = Regex.Replace(text, @"(?i)\b((?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'"".,<>?«»“”‘’]))", "<a href=\"$&\" target=\"_blank\">$&</a>");
                text = Regex.Replace(text, @"<a href=""(?!http)", @"<a href=""http://"); // If the URL doesn't start with http, make it so it does :)
                text = text.Replace(Environment.NewLine, "<br/>");
                var processedText = new MvcHtmlString(text);
            

                  <span>
                      @processedText
                  </span>
        }

        <p class="note">
            Posted on @Html.ActionLink(Model.Page.ShortName, "Index", "Page", new {id = Model.PageId}, null)
            <br/>
            @Model.Created.ToLongTimeString() @Model.Created.ToLongDateString()
        </p>

    </div>

    <div class="clearfix"></div>
    <hr />
</li>
